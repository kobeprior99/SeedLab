# EENG 350: System, Exploration, Engineering, and Design Lab

## Project Goal
Produce an autonomous robot that moves according to arrows and ArUco markers.

## Group 14 Members
- Kobe Prior
- Blane Miller
- Ron Gaines
- Cooper Hammond

---

## Directory Navigation
Project deliverables will be found in their respective category. For example:

There are directories for each deliverable including `Preliminary_Tasks`, `MiniProject`, `Demo1`, `Demo2`, and `Final_Demo`. Each folder contains a README file that will explain goals and subsystem files produced.

---

## Guidelines and Tips

### Using GitHub
- Download GitHub Desktop and add the GitHub extension to VS Code. Need help? Ask Kobe.
- Enable AutoFetch so the current repo is accessible locally: `File > Preferences > Settings`, then search for "Git: Auto Fetch" and toggle it on.
- If you want to pull the current codebase and know multiple people have been using the repo, use `git pull --rebase`.

### Steps to Pushing to GitHub
1. Get the most current repo:
    ```sh
    git pull
    # or
    git pull --rebase
    ```
2. Add all changes:
    ```sh
    git add --all
    ```
3. Commit changes:
    ```sh
    git commit -m "commit message"
    ```
4. Push all changes to the main branch:
    ```sh
    git push
    ```
5. Pray for no merge conflicts.

- When you've made changes, stage the changes with the plus button and commit, leaving a message about what you changed.
- Please produce well-commented code for project implementation.
- Develop code however you want, but ensure it is well-commented when it will be used by the group.
- Try to have as much fun as possible.
- Need new eyes on your code? Ask on Snap if anyone is willing to help, but give it a good college try first.
- Important deliverable deadlines will be filled in on the TEAMS calendar. We can explore using Gantt charts with dependencies if you guys want to as well.
- The use of generative AI is only banned for reflection logs and discussions. Use GenAI to speed up coding and research. VS Code has free Copilot available, and you can tab lines and lines of code to save a bunch of time. ChatGPT is also an option.

### Using Git on Pi
- Cloning the repository: In the command line, type `git clone <repo>` where `<repo>` is the web URL for the repository. This will bring up a menu that asks for authentication (e.g., GitHub username and password).
- Password authentication was disabled by GitHub a while back, so you need to set up an access token. Go to `GitHub > Settings > Developer Settings > Personal Access Tokens > Tokens (classic)`, then follow the prompts to create an access token.
- Use this token where you would type your password when cloning the repo. This will give you access to the repository.
- To avoid re-entering the authentication token every time you push and pull from the repository, use the following fix:

    ```sh
    git remote set-url origin https://<token>@github.com/<username>/<repo>
    ```

    Replace `<token>` with your access token, `<username>` with your GitHub username, and `<repo>` with your repository name. This will allow you to push and pull without re-authenticating every time.